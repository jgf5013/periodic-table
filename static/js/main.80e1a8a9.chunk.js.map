{"version":3,"sources":["app-context.tsx","app-reducer.ts","components/atomic-element/AtomicElement.tsx","components/periodic-table/PeriodicTable.tsx","components/periodic-table/periodic-table.service.ts","app.constants.ts","components/quiz-item/QuizItem.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["AppActionType","appReducer","state","action","console","log","type","AnswerQuestion","isAnswerCorrect","quiz","payload","getNextQuestion","markIncorrect","Error","quizItem","atomicNumber","atomicElement","number","initialQuestionIndex","Math","floor","random","remainingQuestions","length","nextQuestion","splice","currentIncorrectPile","aggregateIncorrectPile","elementJson","elements","initialQuizQuestion","initialStateQuizItem","promptCategory","initialStateApp","atomicElements","AppContext","React","createContext","dispatch","AppContextProvider","children","useReducer","Provider","value","TableElement","useContext","className","includes","onClick","e","symbol","PeriodicTable","tableOfElements","table","Array","TABLE_COLUMNS","fill","undefined","forEach","ypos","xpos","elementListToElementMatrix","map","atomicElementProps","index","QuizItem","prompt","App","elementsJson","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.80e1a8a9.chunk.js","sourcesContent":["import React, { useReducer } from 'react';\nimport { appReducer } from './app-reducer';\n\nimport { IAtomicElement } from './components/atomic-element/atomic-element';\nimport elementJson from './elements.json';\n\nexport interface IQuizState {\n    remainingQuestions: IAtomicElement[];\n    atomicElement?: IAtomicElement;\n    promptCategory: string;\n    currentIncorrectPile: number[],\n    aggregateIncorrectPile: number[]\n}\n\nexport interface IAppState {\n    quiz: IQuizState,\n    atomicElements: IAtomicElement[]\n}\n\nexport enum AppActionType {\n    AnswerQuestion = 'answer question'\n}\n\nexport interface IAppAction {\n    type: AppActionType,\n    payload?: any\n}\n\nconst remainingQuestions = [...elementJson.elements];\nconst initialQuestionIndex = Math.floor(Math.random() * remainingQuestions.length);\nconst initialQuizQuestion = remainingQuestions.splice(initialQuestionIndex, 1)[0];\n\nconst initialStateQuizItem: IQuizState = {\n    remainingQuestions: remainingQuestions,\n    atomicElement: initialQuizQuestion,\n    promptCategory: 'name',\n    currentIncorrectPile: [],\n    aggregateIncorrectPile: []\n};\n\nexport const initialStateApp: IAppState = {\n    atomicElements: elementJson.elements,\n    quiz: initialStateQuizItem\n};\n\n/* Note: The defaultValue argument is only used when a component does not have a matching Provider above it in the\n * tree. This can be helpful for testing components in isolation without wrapping them. Note: passing undefined as a\n * Provider value does not cause consuming components to use defaultValue. */\nexport const AppContext = React.createContext<{state: IAppState, dispatch: any}>({\n    state: initialStateApp,\n    dispatch: () => null\n});\n\n\nexport const AppContextProvider = ({children}: any) => {\n    const [state, dispatch] = useReducer<React.Reducer<IAppState, IAppAction>>(appReducer, initialStateApp);\n\n    return (\n        <AppContext.Provider\n            value={{state, dispatch}}>\n            {children}\n        </AppContext.Provider>);\n};\n\n\n\nexport function useCustomContext() {\n  return React.useContext(AppContext);\n}\n\nexport default AppContext;","import { AppActionType, IAppAction, IAppState, IQuizState } from \"./app-context\";\nimport QuizItem from \"./components/quiz-item/QuizItem\";\n\nexport const appReducer: React.Reducer<IAppState, IAppAction> = (state, action) => {\n    console.log('state=', state, ', action=', action);\n    switch (action.type) {\n      case AppActionType.AnswerQuestion:\n          return isAnswerCorrect(state.quiz, action.payload) ? \n            {...state, quiz: getNextQuestion(state.quiz)} :\n            {...state, quiz: markIncorrect(state.quiz, action.payload)};\n      default:\n          throw new Error();\n    }\n}\n\nconst isAnswerCorrect = (quizItem: IQuizState, atomicNumber: number) => {\n    return quizItem.atomicElement?.number === atomicNumber;\n};\n\nconst getNextQuestion = (quizItem: IQuizState): IQuizState => {\n    console.log('Question answered correctly! Moving onto the next...')\n    const initialQuestionIndex = Math.floor(Math.random() * quizItem.remainingQuestions.length);\n    const nextQuestion = quizItem.remainingQuestions.splice(initialQuestionIndex, 1)[0];\n\n    return {\n        ...quizItem,\n        atomicElement: nextQuestion,\n        remainingQuestions: [...quizItem.remainingQuestions],\n        currentIncorrectPile: [],\n        aggregateIncorrectPile: [...quizItem.aggregateIncorrectPile, ...quizItem.currentIncorrectPile]\n    };\n};\n\n\n\nconst markIncorrect = (quizItem: IQuizState, atomicNumber: number): IQuizState => {\n    console.log('Question answered incorrectly... whomp whooomp!!')\n\n    return {\n        ...quizItem,\n        currentIncorrectPile: [...quizItem.currentIncorrectPile, atomicNumber]\n    };\n}","import { FC, useContext } from 'react';\nimport AppContext, { AppActionType } from '../../app-context';\nimport { IAtomicElement } from './atomic-element';\nimport './AtomicElement.scss';\n\n\nexport interface AtomicElementProps {\n    atomicElement?: IAtomicElement;\n}\n\nconst TableElement: FC<AtomicElementProps> = ({atomicElement}) => {\n    const { state, dispatch } = useContext(AppContext);\n    const { quiz } = state;\n    console.log('quiz=', quiz);\n    \n    return (\n            <div>\n                {atomicElement\n                    ? <div className={`grid-item ${quiz.currentIncorrectPile.includes(atomicElement.number) ? 'incorrect' : ''}`} onClick={(e) => {\n                        dispatch({type: AppActionType.AnswerQuestion, payload: atomicElement.number});\n                      }}>\n                        <div className=\"table-element\">\n                            <span>{atomicElement.number}</span>\n                            <br/>\n                            <span className=\"symbol\">{atomicElement.symbol}</span>\n                        </div>\n                      </div>\n                    : <div className=\"table-filler\">{/* intentionally empty to introduce gap */}</div>\n                }\n            </div>\n    );\n}\n\nexport default TableElement;","import { FC } from 'react';\nimport { IAtomicElement } from '../atomic-element/atomic-element';\nimport TableElement, { AtomicElementProps } from '../atomic-element/AtomicElement';\nimport { elementListToElementMatrix } from './periodic-table.service';\nimport './PeriodicTable.scss';\n\n\nexport interface PeriodicTableProps {\n    atomicElements: IAtomicElement[];\n}\nexport interface PeriodicTableRowProps {\n    atomicElements: IAtomicElement[];\n}\n\nconst PeriodicTable: FC<PeriodicTableProps> = ({atomicElements}) => {\n    const elementsMatrix = elementListToElementMatrix(atomicElements);\n    const tableOfElements = elementsMatrix.map((atomicElementProps: (AtomicElementProps|undefined), index: number) => {\n        return (<TableElement key={\"table-element-\" + index} atomicElement={atomicElementProps?.atomicElement} />);\n    });\n    return (\n        <div className=\"periodic-table\">\n            {tableOfElements}\n        </div>\n    );\n}\n\n\n\nexport default PeriodicTable;","import { TABLE_COLUMNS, TABLE_ROWS } from '../../app.constants';\nimport { IAtomicElement } from '../atomic-element/atomic-element';\nimport { AtomicElementProps } from '../atomic-element/AtomicElement';\n\nexport const elementListToElementMatrix = (elements: IAtomicElement[]):(AtomicElementProps|undefined)[] => {\n    const table: (AtomicElementProps|undefined)[] = new Array(TABLE_COLUMNS * TABLE_ROWS).fill(undefined);\n    elements.forEach((atomicElement) => {\n        table[(TABLE_COLUMNS * (atomicElement.ypos - 1)) + atomicElement.xpos - 1] = {\n            atomicElement\n        };\n    });\n    return table;\n}","export const TABLE_ROWS = 10;\nexport const TABLE_COLUMNS = 18;","import React, { FC, useReducer } from \"react\";\nimport AppContext, { IAppAction, IAppState, initialStateApp } from \"../../app-context\";\nimport { appReducer } from \"../../app-reducer\";\nimport { IAtomicElement } from '../atomic-element/atomic-element';\n\n\nconst QuizItem: FC = () => {\n    const { state } = React.useContext(AppContext);\n    const { quiz } = state;\n    const prompt = quiz.atomicElement ? quiz.atomicElement[quiz.promptCategory as keyof IAtomicElement] : null;\n    return (\n        <div>\n            <p>{prompt}</p>\n        </div>\n    );\n};\n\nexport default QuizItem;","import React, { Component } from 'react';\nimport { AppContextProvider } from './app-context';\nimport './App.scss';\nimport PeriodicTable from './components/periodic-table/PeriodicTable';\nimport QuizItem from './components/quiz-item/QuizItem';\nimport * as elementsJson from './elements.json';\n\nclass App extends Component {\n  render() {\n    return (\n    <div className=\"App\">\n      <div className=\"App-container\">\n        {/* <img src={logo} className=\"App-logo\" alt=\"logo\" /> */}\n        <AppContextProvider>\n          <QuizItem/>\n          <PeriodicTable atomicElements={elementsJson.elements}></PeriodicTable>\n        </AppContextProvider>\n      </div>\n    </div>\n    );\n  }\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}